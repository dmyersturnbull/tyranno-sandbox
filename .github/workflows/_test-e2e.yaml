# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

# Reusable workflow that runs end-to-end PyTest tests inside a container via docker compose.
# TODO: This is experimental.
run-name: Test ${{ inputs.ref }} end-to-end

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
        description: A branch or tag ref; defaults to github.head_ref then to github.ref.
      fail-fast:
        type: boolean
        default: true
        description: Refer to the same input in '_run-pytest.yaml`.
      max-parallel:
        type: number
        default: 1
        description: Refer to the same input in '_run-pytest.yaml`.
      cancel-in-progress:
        type: boolean
        description: >-
          Cancel already-running runs for the same ref.
          Enable for ad-hoc checks, but keep disabled otherwise.
          This is important if 'ref' is an "abbreviated ref" rather than a hash.

concurrency:
  group: _test-e2e / ${{ inputs.ref }}
  cancel-in-progress: ${{ inputs.cancel-in-progress }}

env:
  SERVICE_NAME: app # Named in `compose.yaml` (the key under the top-level `services`).
  PYTEST_OPTIONS: ${{ inputs.fast-fail && '--exitfirst' || '' }}

jobs:
  end-to-end:
    name: End-to-end test ${{ inputs.ref }} on ${{ inputs.os }}
    strategy:
      fail-fast: ${{ inputs.fail-fast }} # Doesn't affect the status of the enclosing job.
      max-parallel: ${{ inputs.max-parallel }}
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Set up Docker Compose
        shell: bash
        run: docker compose up -d --build
      - name: Wait for services to be healthy
        shell: bash
        run: |
          docker compose ps
          sleep 20  # OR write a smarter healthcheck wait
      - name: Run E2E tests
        shell: bash
        run: |
          # shellcheck disable=SC2086 # Intentionally word-split into an array.
          read -r -a pytest_options <<< "$PYTEST_OPTIONS"
          docker compose exec "$SERVICE_NAME" pytest -m e2e "${pytest_options[@]}"
      - name: Show logs if failed
        if: failure()
        shell: bash
        run: |
          docker compose logs
      - name: Tear down
        if: always()
        shell: bash
        run: |
          docker compose down -v
