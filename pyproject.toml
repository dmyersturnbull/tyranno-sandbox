# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

#
####################################################################################################
#                                      [build-system]
####################################################################################################

[build-system]

build-backend = "hatchling.build"
requires = ["hatchling>=1.27"]

#
####################################################################################################
#                                      [project]
####################################################################################################

[project]

name = "tyranno-sandbox"
version = "0.0.1-alpha.0" # See `[tool.tyranno.data.versioning]` for requirements.
requires-python = "~=3.13"

# 'readme' is 'description' in `importlib.metadata`.
readme = { file = "README.md", content-type = "text/markdown" }
# 'description' is 'summary' in `importlib.metadata`.
description = "Sandbox to test CI/CD in Tyrannosaurus"
keywords = ["python", "ci", "cd"]
authors = [
  { name = "Douglas Myers-Turnbull", email = "dmyersturnbull@gmail.com" },
]
maintainers = [
  { name = "Douglas Myers-Turnbull", email = "dmyersturnbull@gmail.com" },
]
license = { text = "Apache-2.0" }

classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Code Generators",
  "Typing :: Typed",
]

# -------------------------- dependencies -------------------------------------
dependencies = [
  "jmespath-community>=1.1.3",
  "loguru>=0.7.2",
  "niquests>=3.14",
  "packaging>=24.0",
  "platformdirs>=4.3.2",
  "pathspec>=0.12",
  "semver>=3.0",
  "typer-slim>=0.16",
  # /usr/share/zoneinfo uses IANA zones; Windows does not
  "tzdata>=2025.1; platform_system == 'Windows'",
]

# -------------------------- optional dependencies ----------------------------
[project.optional-dependencies]
cli = [
  "shellingham>=1.5",
]
server = [
  "fastapi>=0.115",
  "fastapi-problem>=0.11.2",
  "hypercorn>=0.17",
  "pydantic>=2.11",
  "rfc9457>=0.3",
  "zstandard>=0.23",
  "starlette-compress>=1.5",
]
etl = [
  "dramatiq[rabbitmq,redis] >=1.17",
  "hypercorn[h3,uvloop]>=0.17",
  "pymongo>=4.12",
]

# -------------------------- scripts ------------------------------------------
[project.scripts]
# ::tyranno:: $<<project.name>> = "$<<~.namespace>>.__main__:cli"
tyranno-sandbox = "tyranno_sandbox.__main__:cli"

# -------------------------- project URIs -------------------------------------
[project.urls]
# ::tyranno:: "https://github.com/$<<~.frag>>"
Homepage = "https://github.com/dmyersturnbull/tyranno-sandbox"
# ::tyranno:: "https://github.com/$<<~.frag>>"
Source = "https://github.com/dmyersturnbull/tyranno-sandbox"
# ::tyranno:: Documentation = https://$<<~.vendor>>.github.io/$<<project.name>>
Documentation = "https://dmyersturnbull.github.io/tyranno-sandbox"
# ::tyranno:: "Issue Tracker" = $<<~.home>>/issues
Tracker = "https://github.com/dmyersturnbull/tyranno-sandbox/issues"
# ::tyranno:: Download = "https://pypi.org/project/$<<project.name>>"
Download = "https://pypi.org/project/tyranno-sandbox/"
# ::tyranno:: "Release Notes" = "https://github.com/$<<~.frag>>/releases"
"Release Notes" = "https://github.com/dmyersturnbull/tyranno-sandbox/releases"
# ::tyranno:: # Sponsor = "https://$<<~.vendor>>.github.io/$<<project.name>>/placeholder#sponsor"
# Sponsor = "https://dmyersturnbull.github.io/tyranno-sandbox/placeholder#sponsor"

#
####################################################################################################
#                                      [dependency-groups]
####################################################################################################

# See https://docs.astral.sh/uv/concepts/projects/dependencies/#dependency-groups
[dependency-groups]

# uv includes the `dev` group by default (and with `--only-dev`), so include everything in that.
# The other groups are solely intended for use in CI.
dev = [
  "coverage[toml]>=7.8",
  # "deal>=4.24",
  # "hypofuzz>=25.4",
  # "hypothesis[cli,codemods]>=6.130",
  "hypothesis>=6.130",
  "mkdocs>=1.6",
  "mkdocs-material>=9.6",
  "mkdocs-minify-plugin>=0.8",
  "mkdocs-literate-nav>=0.6",
  "mkdocs-api-autonav>=0.2",
  "mkdocstrings[python]>=0.29",
  "pre-commit>=4.2",
  "pytest>=8.3",
  "pytest-cov>=6.1",
  "pytest-datadir>=1.6",
  "pytest-randomly>=3.16",
  "pytest-xdist>=3.6",
  "ruff>=0.11.11",
  "ty>=0.0.1a7",
]
test = [
  "coverage[toml]>=7.8", # Required for coverage.
  "hypothesis>=6.130", # Required.
  "pytest>=8.3", # Required.
  "pytest-cov>=6.1", # Required for coverage.
  "pytest-datadir>=1.6", # Optional. To read test resources in the same dir.
  "pytest-randomly>=3.16", # Optional. Sets and prints the seed, also randomizing test order.
  "pytest-xdist>=3.7", # Optional. Used to distribute tests over multiple cores.
]
docs = [
  "mkdocs>=1.6", # Required.
  "mkdocs-material>=9.6", # Required.
  "mkdocs-minify-plugin>=0.8", # Optional. Minifies CSS, etc., on build.
  "mkdocs-literate-nav>=0.6", # To list contents in `CONTENTS.md` rather than `mkdocs.yaml`.
  "mkdocs-api-autonav>=0.2", # Required for API docs. Extracts docs automatically.
  "mkdocstrings[python]>=0.29", # Required for API docs.
]
lint = [
  "ruff>=0.11.11",
  "ty>=0.0.1a7", # Astral's fledgling type checker.
]
precommit = ["pre-commit>=4.2"]

#
####################################################################################################
#                                      [tool.hatch]
####################################################################################################

[tool.hatch.build.targets.wheel]

# Needed only if `project.name.replace("-", "_") != namespace`,
# where `namespace` is the dir under `src/`.
# ::tyranno:: packages = ["src/$<<~.namespace>>"]
packages = ["src/tyranno_sandbox"]

#
####################################################################################################
#                                      [tool.ruff]
####################################################################################################

[tool.ruff]
exclude = [] # Rely on https://docs.astral.sh/ruff/settings/#respect-gitignore
src = ["src"] # Needed for import sorting
line-length = 100 # See `.editorconfig`.

# -------------------------- [tool.ruff.format] -------------------------------
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

# -------------------------- [tool.ruff.lint] ---------------------------------
[tool.ruff.lint]

preview = true

#          >>>#<<< align to col 15 (max possible width)
select = [
  "A",        # flake8-builtins
  "AIR",      # Airflow (does nothing if not used)
  "ANN",      # flake8-annotations
  "ARG",     # flake8-unused-args (use dummy name in private/lambda, or noqa in public)
  "ASYNC",    # flake8-async
  "B",        # flake8-bugbear
  "BLE",      # flake8-blind-exception: `Exception`, `RuntimeException`, or no type (don't use E722)
  "C4",       # flake8-comprehensions
  "C90",      # mmcabe
  "COM",      # flake8-commas (only a few rules used)
  #"CPY",     # flake8-copyright //DISABLED: handle carefully instead//
  #"D",       # pydocstyle //DISABLED: most rules handled by formatter//
  "D100",     # undocumented public module (could be just 1 line)
  "D101",     # undocumented public class (could be just 1 line)
  "D200",     # unnecessarily multiline docstring
  "D205",     # missing blank line after summary in multiline docstring
  "D209",     # `...final text."""` in multiline docstring
  "D210",     # whitespace around text (almost all auto-fixable)
  "D212",     # summary on second line in multiline docstring
  "D214",     # over-indented section
  "D3",       # docstring ''', \, etc. (almost all auto-fixable)
  "D4",       # blank docstring sections, etc. (almost all auto-fixable)
  "DJ",       # flake8-django (does nothing if not used)
  #"DOC",     # pydoclint //DISABLED: encourages writing sections out of habit//
  "DOC202",   # `Returns` section without `return`
  "DOC403",   # `Yields` section without `yield`
  #"DOC502",  # `Raises` lists exeption not raised directly //DISABLED: often ok//
  "DTZ",      # flake8-datetimez
  #"E",       # pycodestyle ERRORs //DISABLED: almost all handled by formatter//
  "E7",       # == True, bare except, lambda assignment, 'l' in names, etc.
  "E9",       # can't lint -- syntax error, etc.
  "EM",       # flake8-errmsg
  #"ERA",     # eradicate (commented-out code) //DISABLED: error-prone//
  #"EXE",     # flake8-executable //DISABLED: pre-commit shebang rules instead//
  "F",        # pyflakes
  "FA",       # flake8-future-annotations
  "FAST",     # fastapi (does nothing if unused)
  "FBT",      # flake8-boolean-trap (e.g. position boolean args)
  "FIX",      # flake8-fix*me
  "FLY",      # flynt (https://pypi.org/project/flynt/; updates .format)
  "FURB",     # refurb (misc., mostly fixable)
  #"E",       # flake8 errors //DISABLED: handled by formatter or nitpicky//
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventionals
  #"INP",     # flake8-no-pep420 (require __init__.py to import) //DISABLED: false positives//
  "INT",      # flake8-gettext (i18n)
  "ISC",      # flake8-implicit-str-concat
  "LOG",      # flake8-logging
  "N",        # pep8-naming
  "NPY",      # Numpy rules (does nothing if not used)
  "PD",       # pandas-vet (does nothing if not used)
  "PERF",     # perflint
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie (misc. lint rules)
  "PL",       # pylint (PLC, PLE, PLR, and PLW)
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "PYI",      # flake8-pyi (rules for stub files)
  #"Q",       # flake8-quotes //DISABLED: discouraged by Ruff: formatter covers it//
  "RSE",      # flake8-raise
  "RET",      # flake8-return (almost all auto-fixable)
  "RUF",      # Ruff-specific tests
  "S",        # bandit
  "SIM",      # flake8-simplify
  "SLF",      # flake8-self (private access)
  "SLOT",     # flake8-slots
  "T10",      # flake8-debugger (bans debugger)
  "T20",      # flake8-print (bands print and pprint)
  "TC",       # flake8-type-checking (TYPE_CHECKING blocks)
  "TC004",    # move imports that can't be in TYPE_CHECKING blocks
  "TC005",    # remove empty TYPE_CHECKING blocks
  "TC008",    # remove quotes from type aliases
  #"TD",      # flake8-to*do //DISABLED: requires a specific format//
  "TID",      # flake8-tidy-imports (bans relative imports)
  "TRY",      # tryceratops (try-except-raise)
  "UP",       # pyupgrade
  #"W",       # warnings //DISABLED: most fixed by formatter//
  "W60",      # E605 invalid escape character
  "YTT",      # flake8-2020 (incorrect Python version checks)
  "RUF",      # Ruff-specific rules
]

ignore = [
  "COM812",   # no trailing comma; use formatter instead
  "COM819",   # trailing comma; use formatter instead
  "E722",     # "bare-except"; use "blind-except" (BLE001) instead
  "PLR6301",  # 'self' not used (correct for overrides; more OOP)
  "RUF001",   # confusable characters
  "RUF002",   # confusable characters
  "RUF003",   # confusable characters
  "RUF021",   # demands parentheses in `or (x and y)`
]

unfixable = [
  "ERA001",   # commented-out code (not autofixable currently, but just in case)
  "F841",     # unused variable
  "N804",     # first argument not named `cls`
  "N805",     # first argument not named `self`
  "PLE1141",  # unpack tuple from dict without `.items`
  "RUF027",   # possible f-string -- can make mistakes
  "RUF102",   # invalid noqa
  "SIM112",   # uncapitalized env var
  "T201",     # print function
  "T203",     # pprint function
]

# Delegated options
flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
flake8-tidy-imports.ban-relative-imports = "all"
isort.detect-same-package = false # Use `tool.ruff.src` instead.
isort.split-on-trailing-comma = false
pycodestyle.max-doc-length = 100 # match tool.ruff.line-length
mccabe.max-complexity = 12 # default is 10

# Delegated options for pylint
[tool.ruff.lint.pylint]
max-args = 10 # default is 5 (leave `max_positional_args` at 5)
max-bool-expr = 10 # default is 5
max-public-methods = 30 # default is 20
max-locals = 12 # default is 15
max-nested-blocks = 4 # default is 5
allow-dunder-method-names = ["__rich_repr__"] # allow custom dunders

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
  "F401",    # unused import
]
"tests/**/*" = [
  "INP001",  # missing __init__
  "PLR2004", # magic value
  "S101",    # assert
  "S105",    # possible password in string
  "S106",    # in function arg
  "S107",    # in function default
  "S108",    # harcoded temp file
  "TID252",  # relative import
]

#
####################################################################################################
#                                      [tool.pytest]
####################################################################################################

[tool.pytest.ini_options] # pending `[tool.pytest]`

# ******************************* Notes for running tests ******************************************
# - When running tests, the working directory should be the project root.
# - pytest-cov is not compatible with the PyCharm/IntelliJ debugger.
#   See https://www.jetbrains.com/help/pycharm/run-debug-configuration-py-test.html
# **************************************************************************************************

# This pytest 7+ option avoids repeating the package name in various options.
pythonpath = ["src/"]

# Set the default path to `tests/` so that it can be omitted on CLI.
# Don't use `.` or `["tests/", "src/"]`, which would run `src/**/test*.py`.
# For doctests, run `pytest --doctest-modules src/`
testpaths = ["tests/"]

# -------------------------- Logging config -----------------------------------
# Configure logging, and send it "live" (in realtime) to stdout with `log_cli`.
# In `tests/**/*.py`, append `-TEST` to logger names to distinguish them.
log_level = "WARNING"
log_cli = true
log_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_date_format = "%Y-%m-%d %H:%M:%S"

# -------------------------- Doctest options ----------------------------------
# These are used when running `pytest --doctest-modules src/`.
doctest_optionflags = [
  "DONT_ACCEPT_TRUE_FOR_1", # Makes doctest not consider 1 to equal True.
  "NORMALIZE_WHITESPACE",   # Ignores newlines, so we can wrap expected output.
]

# -------------------------- Test markers -------------------------------------
# Define markers that are useful to include/exclude sets of tests.
# - Simple tests only: `-m 'not (slow or net or ux or e2e)'`
# - Simple property tests: `-m 'property and not (slow or net or ux or e2e)'`
markers = [
  "property: property tests using Hypothesis",
  "slow: tests that need a long time to run",
  "net: tests that need network access",
  "ux: tests that need user interaction or manual verification",
  "e2e: tests that need external services",
]

# -------------------------- Pytest CLI args ----------------------------------
# The `--cov-*` options are handled by pytest-cov.
# `--import-mode=importlib` is recommended but **requires test classes to have unique names**.
# `--quiet` just hides ouptut about 'rootdir', 'testpaths', etc.
# `-n auto` uses pytest-xdist to use as many jobs as you have physical cores.
addopts = """
  --cov=src \
  --cov-report json:.coverage.json \
  --cov-report=term \
  --cov-config=pyproject.toml \
  --import-mode=importlib \
  --strict-config \
  --strict-markers \
  --quiet \
  --tb=short \
  -n auto \
"""

#
###################################################################################################
#                                      [tool.coverage]
###################################################################################################

[tool.coverage.run]
data_file = ".coverage.json"
branch = true # Quantify the % coverage of execution branches.
relative_files = true # See https://coverage.readthedocs.io/en/7.6.12/config.html#run-relative-files
omit = ["**/__main__.py"]

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
fail_under = 2 # Require % coverage to ensure config is correct
format = "markdown"
precision = 1 # n decimal points for coverage %
show_missing = true
skip_empty = true
exclude_also = [
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == \"__main__\":",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
]

#
####################################################################################################
#                                      [tool.tyranno]
####################################################################################################

[tool.tyranno]

# These are `.gitignore`-type patterns.
# All `.gitignore`-ed files are automatically excluded.`
# Target files to sync on `tyranno sync`
targets = [
  "/.*ignore",
  "/.editorconfig",
  "/CITATION.cff",
  "/justfile",
  "*.css",
  "*.ini",
  "*.js",
  "*.md",
  "*.py",
  "*.toml",
  "*.ts",
  "*.yaml",
  "Dockerfile",
]

# -------------------------- [tool.tyranno.data] ------------------------------
[tool.tyranno.data]
# These keys are used in `::tyranno::` comments; none have special meanings.
# You can freely add, change, or remove keys.
# Tyrannosaurus will fail if an undefined key is referenced.

vendor = "dmyersturnbull"
# ::tyranno:: namespace = "$<< project.name .replace(@, '_', '-') .lower(@) >>"
namespace = "tyranno_sandbox"
# ::tyranno:: frag = "$<<~.vendor>>/$<<project.name>>"
frag = "dmyersturnbull/tyranno-sandbox"
# ::tyranno:: copyright = "Copyright $<<now_utc().year>>, Contributors to $<<project.name>>"
copyright = "Copyright 2025, Contributors to sandbox-tyranno"
doi = "10.5281/zenodo.4485186" # <<<comment out for new
# Defines 'id', 'name', (canonical) 'uri', 'links', etc.
# ::tyranno alias:: license = $<< project.license.text.spdx_license(@) >>

# Project versioning scheme
[tool.tyranno.data.cicd.tag]
# Enforce PyPa **and** SemVer compatibility.
# Prereleases are non-normalized PyPa matching `v<major>.<minor>.<patch>-<alpha|beta|rc>.<pre>`.
# Real releases are normalized Pya without prerelease numbers: `v<major>.<minor>.<patch>`.
# Omit `^` and `$` to make these easier to use.
prerelease-trigger = 'v(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}-(alpha|beta|rc)\.(0|[1-9]\d*)'
release-trigger = 'v(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}'

# Python versions
[tool.tyranno.data.python]
# List compatible Python versions; e.g. ["3.12.0", [...], "3.12.10", "3.13.0", "3.13.1", "3.13.2"]`.
# Then choose a default (max), and versions to test (max per minor version).
# ::tyranno alias:: valid = $<< project.requires-python .join('', ['python', @]) .pep440_find(@) >>
# ::tyranno alias:: minor-version = $<< .valid | pep440_max(@) .minor_version >>
# ::tyranno alias:: test-versions = $<< .valid | pep440_max_per(@, 'minor') >>
